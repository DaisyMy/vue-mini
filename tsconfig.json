{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 以阅读有关此文件的更多信息 */

    /* 项目 */
    // "incremental": true,                              /* 保存 .tsbuildinfo 文件以允许项目的增量编译。*/
    // "composite": true,                                /* 启用允许 TypeScript 项目与项目引用一起使用的约束。*/
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定增量编译文件的路径。*/
    // "disableSourceOfProjectReferenceRedirect": true,  /* 禁止在引用复合项目时优先使用源文件而不是声明文件。*/
    // "disableSolutionSearching": true,                 /* 在编辑时选择不进行多项目引用检查的项目。*/
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量。*/

    /* 语言和环境 */
    "target": "es5",
    /* 设置生成的 JavaScript 的 JavaScript 语言版本，并包括兼容的库声明。*/
    "lib": [
      "esnext",
      "dom"
    ],
    /* 指定描述目标运行时环境的一组捆绑库声明文件。*/
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码。*/
    // "libReplacement": true,                           /* 启用库替换。*/
    // "experimentalDecorators": true,                   /* 启用对传统实验性装饰器的实验性支持。*/
    // "emitDecoratorMetadata": true,                    /* 为源文件中的装饰声明发出设计类型元数据。*/
    // "jsxFactory": "",                                 /* 指定在针对 React JSX 发出时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h'。*/
    // "jsxFragmentFactory": "",                         /* 指定在针对 React JSX 发出时用于片段的 JSX 片段引用，例如 'React.Fragment' 或 'Fragment'。*/
    // "jsxImportSource": "",                            /* 指定在使用 'jsx: react-jsx*' 时用于导入 JSX 工厂函数的模块说明符。*/
    // "reactNamespace": "",                             /* 指定调用 'createElement' 的对象。这只适用于目标为 'react' JSX 发出时。*/
    // "noLib": true,                                    /* 禁用包括任何库文件，包括默认的 lib.d.ts。*/
    // "useDefineForClassFields": true,                  /* 发出符合 ECMAScript 标准的类字段。*/
    // "moduleDetection": "auto",                        /* 控制使用哪种方法来检测模块格式的 JS 文件。*/

    /* 模块 */
    "module": "esnext",
    /* 指定生成的模块代码。*/
    "rootDir": ".",
    /* 指定源文件中的根文件夹。*/
    "moduleResolution": "node",
    /* 指定 TypeScript 如何从给定的模块说明符查找文件。*/
    "baseUrl": ".",
    /* 指定解析非相对模块名称的基本目录。*/
    "paths": {
      "@vue/*": [
        "packages/*/src"
      ]
    },
    /* 指定一组条目，这些条目重新映射导入到额外的查找位置。*/
    // "rootDirs": [],                                   /* 允许多个文件夹在解析模块时被视为一个。*/
    // "typeRoots": [],                                  /* 指定多个文件夹，其行为类似于 './node_modules/@types'。*/
    // "types": [],                                      /* 指定要包含的类型包名称，而无需在源文件中引用。*/
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量。*/
    // "moduleSuffixes": [],                             /* 解析模块时搜索的文件名后缀列表。*/
    // "allowImportingTsExtensions": true,               /* 允许导入包含 TypeScript 文件扩展名。需要设置 '--moduleResolution bundler' 并且设置 '--noEmit' 或 '--emitDeclarationOnly'。*/
    // "rewriteRelativeImportExtensions": true,          /* 将相对导入路径中的 '.ts', '.tsx', '.mts' 和 '.cts' 文件扩展名重写为其 JavaScript 等效项。*/
    // "resolvePackageJsonExports": true,                /* 使用 package.json 'exports' 字段解析包导入。*/
    // "resolvePackageJsonImports": true,                /* 使用 package.json 'imports' 字段解析导入。*/
    // "customConditions": [],                           /* 在解析导入时设置除解析器特定默认值之外的条件。*/
    // "noUncheckedSideEffectImports": true,             /* 检查副作用导入。*/
    "resolveJsonModule": true,
    /* 启用导入 .json 文件。*/
    // "allowArbitraryExtensions": true,                 /* 如果存在声明文件，则启用导入任意扩展名的文件。*/
    // "noResolve": true,                                /* 禁止 'import's、'require's 或 '<reference>'s 扩展 TypeScript 应添加到项目的文件数量。*/

    /* JavaScript 支持 */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为程序的一部分。使用 'checkJS' 选项可以从这些文件中获取错误。*/
    // "checkJs": true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。*/
    // "maxNodeModuleJsDepth": 1,                        /* 指定从 'node_modules' 检查 JavaScript 文件的最大文件夹深度。仅适用于 'allowJs'。*/

    /* 输出 */
    // "declaration": true,                              /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。*/
    // "declarationMap": true,                           /* 为 d.ts 文件创建 sourcemap 文件。*/
    // "emitDeclarationOnly": true,                      /* 仅输出 d.ts 文件而不输出 JavaScript 文件。*/
    "sourceMap": false,
    /* 为生成的 JavaScript 文件创建 source map 文件。*/
    // "inlineSourceMap": true,                          /* 在生成的 JavaScript 中包含 sourcemap 文件。*/
    // "noEmit": true,                                   /* 禁用从编译中发出文件。*/
    // "outFile": "./",                                  /* 指定将所有输出捆绑成一个 JavaScript 文件的文件。如果 'declaration' 为 true，还指定将所有 .d.ts 输出捆绑在一起的文件。*/
    // "outDir": "./",                                   /* 指定所有发出文件的输出文件夹。*/
    "removeComments": false,
    /* 禁用发出注释。*/
    // "importHelpers": true,                            /* 允许从 tslib 导入辅助函数一次，而不是每个文件都包含它们。*/
    "downlevelIteration": true,
    /* 发出更合规但冗长且性能较低的语法迭代 JavaScript。*/
    // "sourceRoot": "",                                 /* 指定调试器查找参考源代码的根路径。*/
    // "mapRoot": "",                                    /* 指定调试器定位 map 文件的位置而不是生成位置。*/
    // "inlineSources": true,                            /* 在生成的 JavaScript 中的 sourcemap 中包含源代码。*/
    // "emitBOM": true,                                  /* 在输出文件开头发出 UTF-8 字节顺序标记 (BOM)。*/
    // "newLine": "crlf",                                /* 设置发出文件的新行字符。*/
    // "stripInternal": true,                            /* 禁用发出在其 JSDoc 注释中有 '@internal' 的声明。*/
    // "noEmitHelpers": true,                            /* 禁用在编译输出中生成自定义辅助函数，如 '__extends'。*/
    // "noEmitOnError": true,                            /* 如果报告了任何类型检查错误，则禁用发出文件。*/
    // "preserveConstEnums": true,                       /* 禁用在生成的代码中擦除 'const enum' 声明。*/
    // "declarationDir": "./",                           /* 指定生成的声明文件的输出目录。*/

    /* 互操作约束 */
    // "isolatedModules": true,                          /* 确保每个文件可以安全地转译，而无需依赖其他导入。*/
    // "verbatimModuleSyntax": true,                     /* 不转换或省略未标记为类型专用的任何导入或导出，确保它们根据 'module' 设置以输出文件的格式编写。*/
    // "isolatedDeclarations": true,                     /* 要求对导出进行充分注释，以便其他工具可以轻松生成声明文件。*/
    // "erasableSyntaxOnly": true,                       /* 不允许不是 ECMAScript 一部分的运行时构造。*/
    // "allowSyntheticDefaultImports": true,             /* 当模块没有默认导出时，允许 'import x from y'。*/
    "esModuleInterop": true,
    /* 发出额外的 JavaScript 以简化对 CommonJS 模块的支持。这启用了类型兼容性的 'allowSyntheticDefaultImports'。*/
    // "preserveSymlinks": true,                         /* 禁用将符号链接解析为其真实路径。这与 node 中的相同标志相关。*/
    "forceConsistentCasingInFileNames": true,
    /* 确保导入中的大小写正确。*/

    /* 类型检查 */
    "strict": true,
    /* 启用所有严格的类型检查选项。*/
    "noImplicitAny": false,
    /* 启用对具有隐含 'any' 类型的表达式和声明进行错误报告。*/
    // "strictNullChecks": true,                         /* 在类型检查时考虑 'null' 和 'undefined'。*/
    // "strictFunctionTypes": true,                      /* 在分配函数时，检查以确保参数和返回值是子类型兼容的。*/
    // "strictBindCallApply": true,                      /* 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配。*/
    // "strictPropertyInitialization": true,             /* 检查在构造函数中未设置但在类中声明的属性。*/
    // "strictBuiltinIteratorReturn": true,              /* 内置迭代器实例化时，'TReturn' 类型为 'undefined' 而不是 'any'。*/
    // "noImplicitThis": true,                           /* 启用当 'this' 被赋予 'any' 类型时进行错误报告。*/
    // "useUnknownInCatchVariables": true,               /* 默认将 catch 子句变量作为 'unknown' 而不是 'any'。*/
    // "alwaysStrict": true,                             /* 确保始终发出 'use strict'。*/
    "noUnusedLocals": false,
    /* 启用对未读取的局部变量进行错误报告。*/
    "noUnusedParameters": false,
    /* 当函数参数未读取时引发错误。*/
    // "exactOptionalPropertyTypes": true,               /* 按照编写解释可选属性类型，而不是添加 'undefined'。*/
    // "noImplicitReturns": true,                        /* 启用对函数中未显式返回的代码路径进行错误报告。*/
    // "noFallthroughCasesInSwitch": true,               /* 启用对 switch 语句中贯穿情况的错误报告。*/
    // "noUncheckedIndexedAccess": true,                 /* 使用索引访问类型时添加 'undefined'。*/
    // "noImplicitOverride": true,                       /* 确保派生类中的覆盖成员标记有覆盖修饰符。*/
    // "noPropertyAccessFromIndexSignature": true,       /* 强制使用索引访问器访问使用索引类型声明的键。*/
    // "allowUnusedLabels": true,                        /* 禁用对未使用的标签进行错误报告。*/
    // "allowUnreachableCode": true,                     /* 禁用对不可达代码进行错误报告。*/

    /* 完整性 */
    // "skipDefaultLibCheck": true,                      /* 跳过随 TypeScript 一起提供的 .d.ts 文件的类型检查。*/
    "skipLibCheck": true
    /* 跳过所有 .d.ts 文件的类型检查。*/
  },
  "include": [
    "packages/*/src"
  ]
}

